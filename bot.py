import os
import re
import logging
import requests
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    Filters,
    CallbackContext,
    ConversationHandler
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN', '8145762372:AAFKVlNjCopg_VYnlAq92d4LDCITYUMQMXY')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
AMOUNT, FROM_CUR, TO_CUR = range(3)

# –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∫—É—Ä—Å–æ–≤
API_SOURCES = [
    # latest endpoint
    lambda frm, to, amt: requests.get(
        "https://api.exchangerate.host/latest",
        params={"base": frm, "symbols": to}, timeout=5
    ).json().get('rates', {}).get(to) * float(amt),
    # convert endpoint
    lambda frm, to, amt: requests.get(
        "https://api.exchangerate.host/convert",
        params={"from": frm, "to": to, "amount": amt}, timeout=5
    ).json().get('result'),
    # ER-API endpoint
    lambda frm, to, amt: requests.get(
        f"https://open.er-api.com/v6/latest/{frm}", timeout=5
    ).json().get('rates', {}).get(to) * float(amt)
]

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã
POPULAR = [
    ('100 USD ‚Üí KZT', '100:USD:KZT'),
    ('1 EUR ‚Üí USD', '1:EUR:USD'),
    ('1 GBP ‚Üí USD', '1:GBP:USD'),
    ('1 USD ‚Üí EUR', '1:USD:EUR'),
]

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f'convert:{data}')] for name, data in POPULAR
    ]
    keyboard.append([InlineKeyboardButton('üí¨ –†—É—á–Ω–æ–π –≤–≤–æ–¥', callback_data='manual')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        'üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥:',
        reply_markup=reply_markup
    )

# –ù–∞—á–∞–ª–æ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
def manual_start(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    query.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:',
        reply_markup=ReplyKeyboardRemove()
    )
    return AMOUNT

# –®–∞–≥: —Å—É–º–º–∞
def manual_amount(update: Update, context: CallbackContext) -> int:
    text = update.message.text.strip()
    try:
        float(text)
        context.user_data['manual_amount'] = text
    except ValueError:
        update.message.reply_text('‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100')
        return AMOUNT
    presets = ['USD', 'EUR', 'GBP', 'KZT', 'RUB']
    buttons = [[KeyboardButton(c) for c in presets[i:i+3]] for i in range(0, len(presets), 3)]
    update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É:',
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True)
    )
    return FROM_CUR

# –®–∞–≥: –∏—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞
def manual_from(update: Update, context: CallbackContext) -> int:
    frm = update.message.text.strip().upper()
    if not re.fullmatch(r'[A-Za-z]{3}', frm):
        update.message.reply_text('‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä USD')
        return FROM_CUR
    context.user_data['manual_from'] = frm
    presets = ['USD', 'EUR', 'GBP', 'KZT', 'RUB']
    buttons = [[KeyboardButton(c) for c in presets[i:i+3]] for i in range(0, len(presets), 3)]
    update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É:',
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True)
    )
    return TO_CUR

# –®–∞–≥: —Ü–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
def manual_to(update: Update, context: CallbackContext) -> int:
    to = update.message.text.strip().upper()
    if not re.fullmatch(r'[A-Za-z]{3}', to):
        update.message.reply_text('‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä EUR')
        return TO_CUR
    amt = context.user_data.pop('manual_amount')
    frm = context.user_data.pop('manual_from')
    result = None
    for src in API_SOURCES:
        try:
            res = src(frm, to, amt)
            if res is not None:
                result = res
                break
        except Exception as e:
            logger.warning(f'Manual convert source error: {e}')
            continue
    if result is not None:
        update.message.reply_text(
            f'{amt} {frm} = {result:.2f} {to}',
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        update.message.reply_text(
            '‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            reply_markup=ReplyKeyboardRemove()
        )
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
def manual_cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    data = query.data
    if data == 'manual':
        return manual_start(update, context)
    if data.startswith('convert:'):
        try:
            _, amt, frm, to = data.split(':')
            result = None
            for src in API_SOURCES:
                try:
                    res = src(frm, to, amt)
                except Exception as e:
                    logger.warning(f'Quick convert source error: {e}')
                    continue
                if res is not None:
                    result = res
                    break
            if result is not None:
                query.message.reply_text(f'{amt} {frm} = {result:.2f} {to}')
            else:
                query.message.reply_text('‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.')
        except Exception as e:
            logger.error(f'Quick convert failed: {e}')
            query.message.reply_text('‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.')

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    manual_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(manual_start, pattern='^manual$')],
        states={
            AMOUNT: [MessageHandler(Filters.text & ~Filters.command, manual_amount)],
            FROM_CUR: [MessageHandler(Filters.text & ~Filters.command, manual_from)],
            TO_CUR: [MessageHandler(Filters.text & ~Filters.command, manual_to)],
        },
        fallbacks=[CommandHandler('cancel', manual_cancel)],
        allow_reentry=True
    )
    dp.add_handler(manual_conv)
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(CommandHandler('cancel', manual_cancel))
    updater.start_polling()
    logger.info('üîî –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    updater.idle()
